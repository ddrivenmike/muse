<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Brain Model Viewer</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
        }
        
        #canvas-container {
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }
        
        #loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 24px;
            text-align: center;
            z-index: 10;
        }
        
        .spinner {
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 3px solid white;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 15px 30px;
            border-radius: 50px;
            display: flex;
            gap: 20px;
            align-items: center;
            color: white;
            z-index: 100;
        }
        
        button {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }
        
        button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        input[type="range"] {
            width: 100px;
        }
        
        label {
            font-size: 14px;
        }
        
        #info {
            position: absolute;
            top: 20px;
            left: 20px;
            color: white;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 15px;
            border-radius: 10px;
            max-width: 300px;
        }
        
        h1 {
            font-size: 24px;
            margin-bottom: 10px;
        }
        
        p {
            font-size: 14px;
            opacity: 0.9;
            line-height: 1.4;
        }
    </style>
</head>
<body>
    <div id="info">
        <h1>Brain Model Viewer</h1>
        <p>Use mouse to orbit • Scroll to zoom • Click controls below</p>
    </div>
    
    <div id="canvas-container">
        <div id="loading">
            <div>Loading Brain Model...</div>
            <div class="spinner"></div>
        </div>
    </div>
    
    <div id="controls">
        <button id="toggleRotation">Pause Rotation</button>
        <label>Speed: <input type="range" id="speed" min="0" max="5" value="1" step="0.1"></label>
        <button id="resetView">Reset View</button>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    
    <script>
        let scene, camera, renderer, brain, controls;
        let isRotating = true;
        let rotationSpeed = 1;
        
        // Initialize Three.js scene
        function init() {
            // Scene setup
            scene = new THREE.Scene();
            scene.background = null; // Transparent background to show gradient
            
            // Camera setup
            camera = new THREE.PerspectiveCamera(
                45,
                window.innerWidth / window.innerHeight,
                0.1,
                1000
            );
            camera.position.set(0, 0, 5);
            
            // Renderer setup
            renderer = new THREE.WebGLRenderer({ 
                antialias: true, 
                alpha: true 
            });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.getElementById('canvas-container').appendChild(renderer.domElement);
            
            // Lighting setup
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
            scene.add(ambientLight);
            
            const directionalLight1 = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight1.position.set(5, 5, 5);
            directionalLight1.castShadow = true;
            scene.add(directionalLight1);
            
            const directionalLight2 = new THREE.DirectionalLight(0x9999ff, 0.4);
            directionalLight2.position.set(-5, 3, -5);
            scene.add(directionalLight2);
            
            const pointLight = new THREE.PointLight(0xff99ff, 0.3);
            pointLight.position.set(0, -5, 0);
            scene.add(pointLight);
            
            // Controls setup
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.rotateSpeed = 0.5;
            controls.zoomSpeed = 0.8;
            controls.minDistance = 2;
            controls.maxDistance = 10;
            
            // Load GLTF model
            const loader = new THREE.GLTFLoader();
            
            // Set the path for loading related resources (bin files, textures)
            loader.setPath('https://raw.githubusercontent.com/ddrivenmike/muse/main/brain/');
            
            // Try loading with the base filename
            loader.load(
                'untitled.gltf',
                function (gltf) {
                    console.log('Model loaded successfully:', gltf);
                    brain = gltf.scene;
                    
                    // Center and scale the model
                    const box = new THREE.Box3().setFromObject(brain);
                    const center = box.getCenter(new THREE.Vector3());
                    const size = box.getSize(new THREE.Vector3());
                    
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const scale = 3 / maxDim;
                    brain.scale.multiplyScalar(scale);
                    
                    brain.position.sub(center.multiplyScalar(scale));
                    
                    // Enable shadows
                    brain.traverse((child) => {
                        if (child.isMesh) {
                            child.castShadow = true;
                            child.receiveShadow = true;
                            // Log mesh information
                            console.log('Mesh found:', child.name, child.geometry, child.material);
                        }
                    });
                    
                    scene.add(brain);
                    
                    // Hide loading indicator
                    document.getElementById('loading').style.display = 'none';
                },
                function (xhr) {
                    // Progress callback
                    if (xhr.lengthComputable) {
                        const percentComplete = (xhr.loaded / xhr.total) * 100;
                        document.getElementById('loading').innerHTML = 
                            `<div>Loading Brain Model... ${Math.round(percentComplete)}%</div>
                             <div class="spinner"></div>`;
                    }
                },
                function (error) {
                    console.error('Detailed error:', error);
                    console.error('Error message:', error.message);
                    console.error('Error stack:', error.stack);
                    
                    // Try alternative loading approach
                    document.getElementById('loading').innerHTML = 
                        '<div style="color: #ff6b6b;">Error loading from GitHub. Trying alternative method...</div>';
                    
                    // Try with full URL as backup
                    loader.load(
                        'https://raw.githubusercontent.com/ddrivenmike/muse/main/brain/untitled.gltf',
                        function (gltf) {
                            console.log('Model loaded with alternative method');
                            brain = gltf.scene;
                            
                            const box = new THREE.Box3().setFromObject(brain);
                            const center = box.getCenter(new THREE.Vector3());
                            const size = box.getSize(new THREE.Vector3());
                            
                            const maxDim = Math.max(size.x, size.y, size.z);
                            const scale = 3 / maxDim;
                            brain.scale.multiplyScalar(scale);
                            brain.position.sub(center.multiplyScalar(scale));
                            
                            brain.traverse((child) => {
                                if (child.isMesh) {
                                    child.castShadow = true;
                                    child.receiveShadow = true;
                                }
                            });
                            
                            scene.add(brain);
                            document.getElementById('loading').style.display = 'none';
                        },
                        null,
                        function(altError) {
                            console.error('Alternative method also failed:', altError);
                            document.getElementById('loading').innerHTML = 
                                `<div style="color: #ff6b6b;">
                                    Error loading model.<br>
                                    <small>Check console for details. CORS or file structure issue likely.</small><br>
                                    <small>Try hosting files on a web server with proper CORS headers.</small>
                                </div>`;
                        }
                    );
                }
            );
            
            // Event listeners
            window.addEventListener('resize', onWindowResize);
            
            // Control buttons
            document.getElementById('toggleRotation').addEventListener('click', function() {
                isRotating = !isRotating;
                this.textContent = isRotating ? 'Pause Rotation' : 'Resume Rotation';
            });
            
            document.getElementById('speed').addEventListener('input', function(e) {
                rotationSpeed = parseFloat(e.target.value);
            });
            
            document.getElementById('resetView').addEventListener('click', function() {
                camera.position.set(0, 0, 5);
                controls.reset();
            });
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            // Rotate the brain
            if (brain && isRotating) {
                brain.rotation.y += 0.005 * rotationSpeed;
            }
            
            controls.update();
            renderer.render(scene, camera);
        }
        
        // Start the application
        init();
        animate();
    </script>
</body>
</html>
